/**
 * Copyright: Copyright Jason White, 2016
 * License:   MIT
 * Authors:   Jason White
 *
 * Description:
 * Handles the 'convert' command.
 */
module button.cli.convert;

import std.parallelism : TaskPool;

import button.cli.options : ConvertOptions, ConvertFormat, GlobalOptions;

import button.build;
import button.resource;
import button.task;
import button.exceptions;

import io.file, io.text;

/**
 * Converts the JSON build description to another format.
 *
 * This is useful for converting the build to a shell script, for example.
 */
int convertCommand(ConvertOptions opts, GlobalOptions globalOpts)
{
    string path;

    try
    {
        path = buildDescriptionPath(opts.path);
    }
    catch (BuildException e)
    {
        stderr.println(e.msg);
        return 1;
    }
    catch (SysException e)
    {
        stderr.println(e.msg);
        return 1;
    }

    // TODO: Add Batch output with proper error handling

    final switch (opts.type)
    {
        case ConvertFormat.bash:
            return convertToBash(path, opts.output);
    }
}

/**
 * A header explaining what this file is.
 */
private immutable bashHeader = q"EOS
# This file was automatically generated by Button. Do not modify it.
EOS";

bool visitResource(File* f, Resource v,
        size_t degreeIn, size_t degreeChanged)
{
    // Nothing needs to happen here. Just unconditionally continue on to the
    // next vertex in the graph.
    return true;
}

bool bashVisitTask(File* f, Task v,
        size_t degreeIn, size_t degreeChanged)
{
    import button.command : escapeShellArg;

    f.println();

    if (v.display.length)
        f.println("# ", v.display);

    if (v.workingDirectory.length)
        f.println("pushd -- ", v.workingDirectory.escapeShellArg);

    foreach (command; v.commands)
        f.println(command.toPrettyString);

    if (v.workingDirectory.length)
        f.println("popd");

    // Unconditionally continue on to the next vertex in the graph.
    return true;
}

/**
 * Converts the build description to Bash.
 */
private int convertToBash(string input, string output)
{
    import std.parallelism : TaskPool;

    auto f = File(output, FileFlags.writeEmpty);

    version (Posix)
    {
        // Make the output executable. This is a workaround until the mode can
        // be changed in the File() constructor.
        import core.sys.posix.sys.stat : chmod;
        import std.internal.cstring : tempCString;
        sysEnforce(chmod(output.tempCString(), 0b111_101_101) == 0,
                "Failed to make script executable");
    }

    f.println("#!/bin/bash");
    f.print(bashHeader);

    // Stop the build when a command fails.
    f.println("set -xe -o pipefail");

    // Traverse the graph single-threaded, writing out the commands
    auto g = input.rules.graph();

    auto pool = new TaskPool(0);
    scope (exit) pool.finish(true);

    g.traverse!(visitResource, bashVisitTask)(&f, pool);

    return 0;
}
